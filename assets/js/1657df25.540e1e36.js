"use strict";(self.webpackChunkdocumentation_technology=self.webpackChunkdocumentation_technology||[]).push([[820],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return f}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(t),f=o,d=u["".concat(l,".").concat(f)]||u[f]||m[f]||i;return t?r.createElement(d,a(a({ref:n},p),{},{components:t})):r.createElement(d,a({ref:n},p))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},587:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},assets:function(){return p},toc:function(){return m},default:function(){return f}});var r=t(7462),o=t(3366),i=(t(7294),t(3905)),a=["components"],s={sidebar_position:8},l="8. Configure Windows 10 AOVPN Connections",c={unversionedId:"always-on-vpn/configure-windows-10-aovpn-connections",id:"always-on-vpn/configure-windows-10-aovpn-connections",title:"8. Configure Windows 10 AOVPN Connections",description:"Configure the User Tunnel",source:"@site/blueprints/always-on-vpn/configure-windows-10-aovpn-connections.md",sourceDirName:"always-on-vpn",slug:"/always-on-vpn/configure-windows-10-aovpn-connections",permalink:"/blueprints/always-on-vpn/configure-windows-10-aovpn-connections",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"7. Update DNS",permalink:"/blueprints/always-on-vpn/update-dns"},next:{title:"Requirements and Prerequisites",permalink:"/blueprints/microsoft-teams/requirements-and-prerequisites"}},p={},m=[{value:"Configure the User Tunnel",id:"configure-the-user-tunnel",level:2},{value:"Test the User Tunnel",id:"test-the-user-tunnel",level:3},{value:"Create the XML and Powershell configuration files",id:"create-the-xml-and-powershell-configuration-files",level:3},{value:"Test the User VPN Profile is successful",id:"test-the-user-vpn-profile-is-successful",level:3},{value:"Configure the Device Tunnel",id:"configure-the-device-tunnel",level:2},{value:"Test the Device Tunnel",id:"test-the-device-tunnel",level:3}],u={toc:m};function f(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"8-configure-windows-10-aovpn-connections"},"8. Configure Windows 10 AOVPN Connections"),(0,i.kt)("h2",{id:"configure-the-user-tunnel"},"Configure the User Tunnel"),(0,i.kt)("p",null,"User tunnel connects only after a user logs on to the device. User tunnel allows users to access organization resources through VPN servers."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Logon to a Windows 10 test machine with a user account that is member of the AOVPN Users AD group - ensure local administrator capabilities"),(0,i.kt)("li",{parentName:"ol"},"Open Settings > Network & Internet > VPN > Add a VPN connection"),(0,i.kt)("li",{parentName:"ol"},"VPN provider: Windows (built-in)"),(0,i.kt)("li",{parentName:"ol"},"Connection name: AOVPN Template"),(0,i.kt)("li",{parentName:"ol"},"Server name: alwaysonvpn.clientname.com"),(0,i.kt)("li",{parentName:"ol"},"VPN type: IKEv2"),(0,i.kt)("li",{parentName:"ol"},"Type of sign-in: Certificate"),(0,i.kt)("li",{parentName:"ol"},"Save"),(0,i.kt)("li",{parentName:"ol"},"Open network connects by running: ncpa.cpl"),(0,i.kt)("li",{parentName:"ol"},"Right-click Template VPN connection > Properties"),(0,i.kt)("li",{parentName:"ol"},"Security tab - VPN is set to IKEv2"),(0,i.kt)("li",{parentName:"ol"},"Security tab - Change Data encryption to Maximum strength encryption (disconnect if server declines)"),(0,i.kt)("li",{parentName:"ol"},"Security tab - Under the Use Extensible Authentication Protocol (EAP) option, select Microsoft: Protected EAP (PEAP) (encryption enabled)"),(0,i.kt)("li",{parentName:"ol"},"Security tab - Properties > FQDN of NPS: NPS FQDN server name")),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},'The NPS server name you type must match the name in the certificate. If the name does not match, the connection will fail, stating that "The connection was prevented because of a policy configured on your RAS/VPN server."'))),(0,i.kt)("ol",{start:15},(0,i.kt)("li",{parentName:"ol"},"Security tab - Trusted Root CA: select the Root CA that issued the user authentication certificate"),(0,i.kt)("li",{parentName:"ol"},"Security tab - Notifications: select Don\u2019t ask user to authorize new servers or trusted CAs"),(0,i.kt)("li",{parentName:"ol"},"Security tab - Select Authentication Method, select Smart Card or other certificate > Configure"),(0,i.kt)("li",{parentName:"ol"},"Security tab - Select User a certificate on this computer > Advanced"),(0,i.kt)("li",{parentName:"ol"},"Security tab - Check the Certificate Issuer box and Select the Root CA from the list"),(0,i.kt)("li",{parentName:"ol"},"Click OK"),(0,i.kt)("li",{parentName:"ol"},"Security tab - under Connect to these servers, type NPS FQDN server name"),(0,i.kt)("li",{parentName:"ol"},"Security tab - Trusted Root CA: select the Root CA that issued the user authentication certificate"),(0,i.kt)("li",{parentName:"ol"},"Security tab - Check the Don\u2019t prompt user to authorize new servers or trusted certification authorities box"),(0,i.kt)("li",{parentName:"ol"},"Click OK three times")),(0,i.kt)("h3",{id:"test-the-user-tunnel"},"Test the User Tunnel"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Open network connects by running: ncpa.cpl"),(0,i.kt)("li",{parentName:"ol"},"Right-click AOVPN Template > Connect")),(0,i.kt)("h3",{id:"create-the-xml-and-powershell-configuration-files"},"Create the XML and Powershell configuration files"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Open powershell as administrator"),(0,i.kt)("li",{parentName:"ol"},"Issue the script below"),(0,i.kt)("li",{parentName:"ol"},"This will output VPN_Profile.ps1 and VPN_Profile.xml to the desktop")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'$TemplateName = \'AOVPN Template\'\n $ProfileName = \'Clientname AlwaysOn VPN User Profile\'\n $Servers = \'alwaysonvpn.clientname.com\'\n $DnsSuffix = \'clientname.co.uk\'\n $DomainName = \'.clientname.co.uk\'\n $DNSServers = \'10.0.0.1,10.0.0.2\'\n $TrustedNetwork = \'clientname.co.uk\'\n $Connection = Get-VpnConnection -Name $TemplateName\n if(!$Connection)\n {\n $Message = "Unable to get $TemplateName connection profile: $_"\n Write-Host "$Message"\n exit\n }\n $EAPSettings= $Connection.EapConfigXmlStream.InnerXml\n $ProfileXML = @("\n <VPNProfile>\n   <DnsSuffix>$DnsSuffix</DnsSuffix>\n   <NativeProfile>\n <Servers>$Servers</Servers>\n <NativeProtocolType>IKEv2</NativeProtocolType>\n <Authentication>\n   <UserMethod>Eap</UserMethod>\n   <Eap>\n    <Configuration>\n     $EAPSettings\n    </Configuration>\n   </Eap>\n </Authentication>\n <RoutingPolicyType>SplitTunnel</RoutingPolicyType>\n   </NativeProfile>\n <AlwaysOn>true</AlwaysOn>\n <RememberCredentials>true</RememberCredentials>\n <TrustedNetworkDetection>$TrustedNetwork</TrustedNetworkDetection>\n   <DomainNameInformation>\n <DomainName>$DomainName</DomainName>\n <DnsServers>$DNSServers</DnsServers>\n </DomainNameInformation>\n </VPNProfile>\n ")\n $ProfileXML | Out-File -FilePath ($env:USERPROFILE + \'\\desktop\\VPN_Profile.xml\')\n  $Script = @("\n   `$ProfileName = \'$ProfileName\'\n   `$ProfileNameEscaped = `$ProfileName -replace \' \', \'%20\'\n   `$ProfileXML = \'$ProfileXML\'\n   `$ProfileXML = `$ProfileXML -replace \'<\', \'&lt;\'\n   `$ProfileXML = `$ProfileXML -replace \'>\', \'&gt;\'\n   `$ProfileXML = `$ProfileXML -replace \'`"\', \'&quot;\'\n   `$nodeCSPURI = `"./Vendor/MSFT/VPNv2`"\n   `$namespaceName = `"root\\cimv2\\mdm\\dmmap`"\n   `$className = `"MDM_VPNv2_01`"\n   try\n   {\n   `$username = Gwmi -Class Win32_ComputerSystem | select username\n   `$objuser = New-Object System.Security.Principal.NTAccount(`$username.username)\n   `$sid = `$objuser.Translate([System.Security.Principal.SecurityIdentifier])\n   `$SidValue = `$sid.Value\n   `$Message = `"User SID is `$SidValue.`"\n   Write-Host `"`$Message`"\n   }\n   catch [Exception]\n   {\n   `$Message = `"Unable to get user SID. User may be logged on over Remote Desktop: `$_`"\n   Write-Host `"`$Message`"\n   exit\n   }\n   `$session = New-CimSession\n   `$options = New-Object Microsoft.Management.Infrastructure.Options.CimOperationOptions\n   `$options.SetCustomOption(`"PolicyPlatformContext_PrincipalContext_Type`", `"PolicyPlatform_UserContext`", `$false)\n   `$options.SetCustomOption(`"PolicyPlatformContext_PrincipalContext_Id`", `"`$SidValue`", `$false)\n   try\n   {\n  `$deleteInstances = `$session.EnumerateInstances(`$namespaceName, `$className, `$options)\n  foreach (`$deleteInstance in `$deleteInstances)\n  {\n      `$InstanceId = `$deleteInstance.InstanceID\n      if (`"`$InstanceId`" -eq `"`$ProfileNameEscaped`")\n      {\n          `$session.DeleteInstance(`$namespaceName, `$deleteInstance, `$options)\n          `$Message = `"Removed `$ProfileName profile `$InstanceId`"\n          Write-Host `"`$Message`"\n      } else {\n          `$Message = `"Ignoring existing VPN profile `$InstanceId`"\n          Write-Host `"`$Message`"\n      }\n  }\n   }\n   catch [Exception]\n   {\n  `$Message = `"Unable to remove existing outdated instance(s) of `$ProfileName profile: `$_`"\n  Write-Host `"`$Message`"\n  exit\n   }\n   try\n   {\n  `$newInstance = New-Object Microsoft.Management.Infrastructure.CimInstance `$className, `$namespaceName\n  `$property = [Microsoft.Management.Infrastructure.CimProperty]::Create(`"ParentID`", `"`$nodeCSPURI`", `"String`", `"Key`")\n  `$newInstance.CimInstanceProperties.Add(`$property)\n  `$property = [Microsoft.Management.Infrastructure.CimProperty]::Create(`"InstanceID`", `"`$ProfileNameEscaped`", `"String`", `"Key`")\n  `$newInstance.CimInstanceProperties.Add(`$property)\n  `$property = [Microsoft.Management.Infrastructure.CimProperty]::Create(`"ProfileXML`", `"`$ProfileXML`", `"String`", `"Property`")\n  `$newInstance.CimInstanceProperties.Add(`$property)\n  `$session.CreateInstance(`$namespaceName, `$newInstance, `$options)\n  `$Message = `"Created `$ProfileName profile.`"\n  Write-Host `"`$Message`"\n   }\n   catch [Exception]\n   {\n  `$Message = `"Unable to create `$ProfileName profile: `$_`"\n  Write-Host `"`$Message`"\n  exit\n   }\n   `$Message = `"Script Complete`"\n   Write-Host `"`$Message`"\n   ")\n   $Script | Out-File -FilePath ($env:USERPROFILE + \'\\desktop\\VPN_Profile.ps1\')\n $Message = "Successfully created VPN_Profile.xml and VPN_Profile.ps1 on the desktop."\n Write-Host "$Message"\n')),(0,i.kt)("h3",{id:"test-the-user-vpn-profile-is-successful"},"Test the User VPN Profile is successful"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Open powershell as administrator"),(0,i.kt)("li",{parentName:"ol"},"Run the VPN_Profile.ps1 script"),(0,i.kt)("li",{parentName:"ol"},"To ensure it's successful, issue the following command:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Get-WmiObject -Namespace root\\cimv2\\mdm\\dmmap -Class MDM_VPNv2_01")))),(0,i.kt)("li",{parentName:"ol"},"Successful results can be viewed below"),(0,i.kt)("li",{parentName:"ol"},"Ensure the old and new AOVPN profiles run side by side")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'__GENUS : 2\n__CLASS : MDM_VPNv2_01\n__SUPERCLASS:\n__DYNASTY : MDM_VPNv2_01\n__RELPATH : MDM_VPNv2_01.InstanceID="Clientname%20AlwaysOn%20VPN%20User%20Profile",ParentID\n  ="./Vendor/MSFT/VPNv2"\n__PROPERTY_COUNT: 10\n__DERIVATION: {}\n__SERVER: WIN01\n__NAMESPACE : root\\cimv2\\mdm\\dmmap\n__PATH : \\\\WIN01\\root\\cimv2\\mdm\\dmmap:MDM_VPNv2_01.InstanceID="Clientname%20AlwaysOn%20VPN%20User%20Profile",ParentID="./Vendor/MSFT/VPNv2"\nAlwaysOn: True\nByPassForLocal :\nDnsSuffix : clientname.co.uk\nEdpModeId :\nInstanceID : Clientname%20AlwaysOn%20VPN%20User%20Profile\nLockDown:\nParentID: ./Vendor/MSFT/VPNv2\nProfileXML : <VPNProfile><RememberCredentials>true</RememberCredentials>\n  <AlwaysOn>true</AlwaysOn><DnsSuffix>clientname.co.uk</DnsSu\n  ffix><TrustedNetworkDetection>clientname.co.uk</TrustedNetw\n  orkDetection><NativeProfile><Servers>alwaysonvpn.clientname.com</Servers><RoutingPolicyType>SplitTunnel</RoutingP\n  olicyType><NativeProtocolType>Ikev2</NativeProtocolType><Au\n  thentication><UserMethod>Eap</UserMethod><MachineMethod>Eap\n  </MachineMethod><Eap><Configuration><EapHostConfig xmlns="h\n  ttp://www.microsoft.com/provisioning/EapHostConfig"><EapMet\n  hod><Type xmlns="https://www.microsoft.com/provisioning/EapC\n  ommon">25</Type><VendorId xmlns="https://www.microsoft.com/p\n  rovisioning/EapCommon">0</VendorId><VendorType xmlns="http:\n  //www.microsoft.com/provisioning/EapCommon">0</VendorType><\n  AuthorId xmlns="https://www.microsoft.com/provisioning/EapCo\n  mmon">0</AuthorId></EapMethod><Config xmlns="https://www.mic\n  rosoft.com/provisioning/EapHostConfig"><Eap xmlns="https://w\n  ww.microsoft.com/provisioning/BaseEapConnectionPropertiesV1\n  "><Type>25</Type><EapType xmlns="https://www.microsoft.com/p\n  rovisioning/MsPeapConnectionPropertiesV1"><ServerValidation\n  ><DisableUserPromptForServerValidation>true</DisableUserPro\n  mptForServerValidation><ServerNames>NPS</ServerNames><Trust\n  edRootCA>FF 07 88 e8 ac 00 32 e4 23 3f 30 f8 db 56 25 e1 2e \n  5b 84 DD </TrustedRootCA></ServerValidation><FastReconne\n  ct>true</FastReconnect><InnerEapOptional>false</InnerEapOpt\n  ional><Eap xmlns="https://www.microsoft.com/provisioning/Bas\n  eEapConnectionPropertiesV1"><Type>13</Type><EapType xmlns="\n  https://www.microsoft.com/provisioning/EapTlsConnectionPrope\n  rtiesV1"><CredentialsSource><CertificateStore><SimpleCertSe\n  lection>true</SimpleCertSelection></CertificateStore></Cred\n  entialsSource><ServerValidation><DisableUserPromptForServer\n  Validation>true</DisableUserPromptForServerValidation><Serv\n  erNames>NPS</ServerNames><TrustedRootCA>FF 07 88 e8 ac 00\n  32 e4 23 3f 30 f8 db 56 25 e1 2e 5b 84 DD </TrustedRootCA><\n  /ServerValidation><DifferentUsername>false</DifferentUserna\n  me><PerformServerValidation xmlns="https://www.microsoft.com\n  /provisioning/EapTlsConnectionPropertiesV2">true</PerformSe\n  rverValidation><AcceptServerName xmlns="https://www.microsof\n  t.com/provisioning/EapTlsConnectionPropertiesV2">true</Acce\n  ptServerName></EapType></Eap><EnableQuarantineChecks>false<\n  /EnableQuarantineChecks><RequireCryptoBinding>false</Requir\n  eCryptoBinding><PeapExtensions><PerformServerValidation xml\n  ns="https://www.microsoft.com/provisioning/MsPeapConnectionP\n  ropertiesV2">true</PerformServerValidation><AcceptServerNam\n  e xmlns="https://www.microsoft.com/provisioning/MsPeapConnec\n  tionPropertiesV2">true</AcceptServerName></PeapExtensions><\n  /EapType></Eap></Config></EapHostConfig></Configuration></E\n  ap></Authentication></NativeProfile><DomainNameInformation>\n  <DomainName>.clientname.co.uk</DomainName><DnsServers>10.0.0.1,10.0.0.2</DnsServers><AutoTrigger>true</AutoTrigger></\n  DomainNameInformation></VPNProfile>\nRememberCredentials : True\nTrustedNetworkDetection : clientname.co.uk\nPSComputerName : pcnamehere\n')),(0,i.kt)("h2",{id:"configure-the-device-tunnel"},"Configure the Device Tunnel"),(0,i.kt)("p",null,"Device tunnel connects to specified VPN servers before users log on to the device. Pre-login connectivity scenarios and device management purposes use device tunnel."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Create the following XML file and save it somewhere ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"<VPNProfile>\n <AlwaysOn>true</AlwaysOn>\n <DeviceTunnel>true</DeviceTunnel>\n <DnsSuffix>clientname.co.uk</DnsSuffix>\n <RegisterDNS>true</RegisterDNS>\n <TrustedNetworkDetection>clientname.co.uk</TrustedNetworkDetection>\n <NativeProfile>\n  <Servers>alwaysonvpn.clientname.com</Servers>\n  <RoutingPolicyType>SplitTunnel</RoutingPolicyType>\n  <NativeProtocolType>IKEv2</NativeProtocolType>\n  <Authentication>\n   <MachineMethod>Certificate</MachineMethod>\n  </Authentication>\n  <DisableClassBasedDefaultRoute>true</DisableClassBasedDefaultRoute>\n </NativeProfile>\n <Route>\n  <Address>10.0.0.0</Address>\n  <PrefixSize>8</PrefixSize>\n </Route>\n <TrafficFilter>\n  <RemoteAddressRanges>10.0.0.0</RemoteAddressRanges>\n </TrafficFilter>\n</VPNProfile>\n")),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"Open powershell as administrator"),(0,i.kt)("li",{parentName:"ol"},"Run the script below")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Param(\n[Parameter(Mandatory = $True, HelpMessage = 'Enter the path to the ProfileXML file.')]\n[string]$xmlFilePath,\n[Parameter(Mandatory = $False, HelpMessage = 'Enter a name for the VPN profile.')]\n[string]$ProfileName = 'Clientname AlwaysOn VPN Device Profile'\n)\n\n$a = Test-Path $xmlFilePath\necho $a\n\n$ProfileXML = Get-Content $xmlFilePath\n\necho $XML\n\n$ProfileNameEscaped = $ProfileName -replace ' ', '%20'\n\n$Version = 201606090004\n\n$ProfileXML = $ProfileXML -replace '<', '&lt;'\n$ProfileXML = $ProfileXML -replace '>', '&gt;'\n$ProfileXML = $ProfileXML -replace '\"', '&quot;'\n\n$nodeCSPURI = './Vendor/MSFT/VPNv2'\n$namespaceName = \"root\\cimv2\\mdm\\dmmap\"\n$className = \"MDM_VPNv2_01\"\n\n$session = New-CimSession\n\ntry\n{\n$newInstance = New-Object Microsoft.Management.Infrastructure.CimInstance $className, $namespaceName\n$property = [Microsoft.Management.Infrastructure.CimProperty]::Create(\"ParentID\", \"$nodeCSPURI\", 'String', 'Key')\n$newInstance.CimInstanceProperties.Add($property)\n$property = [Microsoft.Management.Infrastructure.CimProperty]::Create(\"InstanceID\", \"$ProfileNameEscaped\", 'String', 'Key')\n$newInstance.CimInstanceProperties.Add($property)\n$property = [Microsoft.Management.Infrastructure.CimProperty]::Create(\"ProfileXML\", \"$ProfileXML\", 'String', 'Property')\n$newInstance.CimInstanceProperties.Add($property)\n\n$session.CreateInstance($namespaceName, $newInstance)\n$Message = \"Created $ProfileName profile.\"\nWrite-Host \"$Message\"\n}\ncatch [Exception]\n{\n$Message = \"Unable to create $ProfileName profile: $_\"\nWrite-Host \"$Message\"\nexit\n}\n$Message = \"Complete.\"\nWrite-Host \"$Message\"\n")),(0,i.kt)("h3",{id:"test-the-device-tunnel"},"Test the Device Tunnel"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Run the following command:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Get-VpnConnection -AllUserConnection"))))))}f.isMDXComponent=!0}}]);