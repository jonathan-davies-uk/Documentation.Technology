"use strict";(self.webpackChunkdocumentation_technology=self.webpackChunkdocumentation_technology||[]).push([[1692],{3905:function(e,r,t){t.d(r,{Zo:function(){return p},kt:function(){return f}});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function c(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?c(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},c=Object.keys(e);for(n=0;n<c.length;n++)t=c[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)t=c[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var a=n.createContext({}),u=function(e){var r=n.useContext(a),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},p=function(e){var r=u(e.components);return n.createElement(a.Provider,{value:r},e.children)},m={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},l=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,c=e.originalType,a=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),l=u(t),f=o,d=l["".concat(a,".").concat(f)]||l[f]||m[f]||c;return t?n.createElement(d,i(i({ref:r},p),{},{components:t})):n.createElement(d,i({ref:r},p))}));function f(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var c=t.length,i=new Array(c);i[0]=l;var s={};for(var a in r)hasOwnProperty.call(r,a)&&(s[a]=r[a]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var u=2;u<c;u++)i[u]=t[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}l.displayName="MDXCreateElement"},2852:function(e,r,t){t.r(r),t.d(r,{frontMatter:function(){return s},contentTitle:function(){return a},metadata:function(){return u},assets:function(){return p},toc:function(){return m},default:function(){return f}});var n=t(7462),o=t(3366),c=(t(7294),t(3905)),i=["components"],s={sidebar_position:5},a="Get Group Members of User accounts",u={unversionedId:"useful-commands-and-scripts/get-group-member-user-accounts",id:"useful-commands-and-scripts/get-group-member-user-accounts",title:"Get Group Members of User accounts",description:'This script gets a list of all accounts with the description "Service Account" and finds what groups they are a member of.',source:"@site/active-directory/useful-commands-and-scripts/get-group-member-user-accounts.md",sourceDirName:"useful-commands-and-scripts",slug:"/useful-commands-and-scripts/get-group-member-user-accounts",permalink:"/active-directory/useful-commands-and-scripts/get-group-member-user-accounts",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Change User Principal Name (UPN)",permalink:"/active-directory/useful-commands-and-scripts/change-upn"},next:{title:"Decommissioning 2003 Functional Level DC",permalink:"/active-directory/ad-decommission/decommission-2003-functional-level-dc"}},p={},m=[],l={toc:m};function f(e){var r=e.components,t=(0,o.Z)(e,i);return(0,c.kt)("wrapper",(0,n.Z)({},l,t,{components:r,mdxType:"MDXLayout"}),(0,c.kt)("h1",{id:"get-group-members-of-user-accounts"},"Get Group Members of User accounts"),(0,c.kt)("p",null,'This script gets a list of all accounts with the description "Service Account" and finds what groups they are a member of.'),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},'$obj = @()\n$users = Get-ADUser -Filter * -Properties Description, MemberOf | Select Name, Description, MemberOf, SamAccountName | ? Description -like "Service Account" | sort Name\n\nforeach($user in $users){\n  $groups = Get-ADPrincipalGroupMembership $user.SamAccountName \n  foreach($group in $groups){\n    $obj += [PSCustomObject]@{\n        "User" = $user.Name\n        "Username" = $user.SamAccountName\n        "Account Type" = $user.Description\n        "Group" = $group.name\n    }\n  }\n}\n\n$obj | export-csv -Path "C:\\temp\\service-account-groups.csv" -NoTypeInformation\n')))}f.isMDXComponent=!0}}]);